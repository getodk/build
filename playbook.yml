---

- hosts: all
  vars_files:
    - config/build.yml

  user: "{{users.provisioning_user}}"
  become: true

  gather_facts: false
  pre_tasks:
    - name: Ensure Python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      register: python_result
      changed_when: python_result.stdout != ""
    - name: Ensure Postgres extensions for Build
      apt:
        name: libpq-dev
        update_cache: true
    - name: Ensure libgmp for native gem compilation
      apt:
        name: libgmp-dev
    - setup: # (gather_facts)


  roles:
    - role: ANXS.hostname

    - role: ANXS.generic-users
      genericusers_users:
        - name: "{{users.build_user}}"
          comment: "Build application user"
          groups: []
          ssh_keys: []
          system: true
        - name: "{{users.xls_service_user}}"
          comment: "XLS conversion service user"
          groups: []
          ssh_keys: []
          system: true

    - role: rvm_io.ruby
      rvm1_rubies: 
        - "{{app.ruby_version}}"
      rvm1_install_flags: "--auto-dotfiles"
      rvm1_install_path: "/usr/local/rvm"
      rvm1_user: root
      become: true

    - role: nodesource.node
      nodejs_version: "6.x"

    - role: ANXS.monit
      monit_email_enable: true
      monit_notify_email: "{{monitoring.email}}"

    - role: ANXS.postgresql
      postgresql_version: 9.5
      monit_protection: true
      postgresql_wal_level: archive
      postgresql_archive_mode: on
      postgresql_archive_command: '/etc/wale/wale.sh wal-push %p'
      postgresql_listen_addresses:
        - "*"
      postgresql_users:
        - name: "{{database.application_user.name}}"
          pass: "{{database.application_user.pass}}"
          encrypted: false
      postgresql_databases:
        - name: "{{database.name}}"
          owner: "{{database.application_user.name}}"
          encoding: "UTF-8"
      postgresql_pg_hba_default:
        - type: local
          database: all
          user: postgres
          address: ""
          method: trust
        - type: host
          database: "{{database.name}}"
          user: "{{database.application_user.name}}"
          address: "127.0.0.1/32"
          method: trust
        - type: host
          database: "{{database.name}}"
          user: "{{database.application_user.name}}"
          address: "::1/128"
          method: trust

    - role: Stouts.wale
      when: "database.backup.s3_access_key != ''"
      postgresql_version: 9.5
      wale_aws_access_key_id: "{{database.backup.s3_access_key}}"
      wale_aws_secret_access_key: "{{database.backup.s3_secret_key}}"
      wale_aws_region: "{{database.backup.s3_region}}"
      wale_aws_s3_prefix: "{{database.backup.s3_destination_prefix}}"
      wale_latest: false

    - role: odkbuild.deployable-app
      odkbuild_app_root: "{{app.root_dir}}"
      odkbuild_app_owner: "{{users.build_user}}"
      odkbuild_db_host: "{{database.host}}"
      odkbuild_db_name: "{{database.name}}"
      odkbuild_db_user: "{{database.application_user.name}}"
      odkbuild_db_pass: "{{database.application_user.pass}}"
      odkbuild_ssl_only: "{{http.force_ssl}}"

    - role: odkbuild.unicorn
      unicorn_user: "{{users.build_user}}"
      unicorn_app_root: "{{app.root_dir}}"

    - role: odkbuild.xls-service
      service_root: "{{xls_service.root_dir}}"
      service_owner: "{{users.xls_service_user}}"

    - role: ANXS.nginx
      monit_protection: true
      nginx_install_method: package
      nginx_default_enable: false
      nginx_client_max_body_size: "15M"
      nginx_sites:
        - server:
            name: http
            listen: 80
            server_name: "{{http.host_name}}"
            location1:
              name: "{{http.force_ssl | ternary('~ ^/(user.*|form.*|login|logout|unauthenticated|reset_password|download|binary/.*|aggregate/.*|images/.*|javascripts/.*|stylesheets/.*)?$', '_nonexistent')}}"
              return: "301 https://$host$request_uri"
            location2:
              name: "{{http.force_ssl | ternary('_nonexistent', '~ ^/(user.*|form.*|login|logout|unauthenticated|reset_password|download|binary/.*|aggregate/.*|images/.*|javascripts/.*|stylesheets/.*)?$')}}"
              proxy_pass: "http://unix:/var/odkbuild/build-server.sock"
            location3:
              name: "~ ^/convert"
              proxy_pass: "http://[::1]:8686"
            location4:
              name: "~ ^/.well-known"
              root: "/var/www"
              error_page: "404 =500"
        - server:
            name: https
            listen: "443 ssl"
            server_name: "{{http.host_name}}"
            ssl: 'on'
            ssl_certificate: "/etc/letsencrypt/live/{{http.host_name}}/fullchain.pem"
            ssl_certificate_key: "/etc/letsencrypt/live/{{http.host_name}}/privkey.pem"
            ssl_protocols: "TLSv1.2 TLSv1.1 TLSv1"
            ssl_prefer_server_ciphers: 'on'
            ssl_ciphers: '"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS"'
            location1:
              name: "/"
              proxy_pass: "http://unix:/var/odkbuild/build-server.sock"
            location2:
              name: "~ ^/convert"
              proxy_pass: "http://[::1]:8686"
      nginx_enabled_sites:
        - http
        - "{{http.ssl | ternary('https', 'http')}}"

    - role: thefinn93.letsencrypt
      when: "http.ssl == true"
      letsencrypt_email: "{{monitoring.email}}"
      letsencrypt_cert_domains:
        - "{{http.host_name}}"
      letsencrypt_renewal_command_args: "--post-hook \"systemctl reload nginx\""
      letsencrypt_renewal_frequency:
        day: 15
        hour: 0
        minute: 0

    - role: geerlingguy.postfix

  post_tasks:
    - include: tasks/deploy.yml
      become_user: "{{odkbuild_app_owner}}"
      become: true
      vars:
        odkbuild_app_root: "{{app.root_dir}}"
        odkbuild_app_owner: "{{users.build_user}}"
        odkbuild_ci_project: "{{ci.project}}"
        odkbuild_ci_branch: "{{ci.branch}}"
        odkbuild_keep_releases: "{{ci.keep_old_releases}}"

    - include: tasks/deploy-xls.yml
      become_user: "{{service_owner}}"
      become: true
      vars:
        service_owner: "{{users.xls_service_user}}"
        service_root: "{{xls_service.root_dir}}"
        service_version: "{{xls_service.release_version}}"

    - name: Enable and start Unicorn server
      systemd:
        name: build-server
        enabled: true
        state: started

    - name: Enable and start xls service
      systemd:
        name: xls-service
        enabled: true
        state: started

